require 'rails_helper'
require 'support/factory_bot'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe AssignmentSetsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # AssignmentSet. As you add validations to AssignmentSet, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:empty_assignment)
  }

  let(:invalid_attributes) {
    {}
  }

  let(:all_books) {
    [:parker, :ncmj, :bahlow, :ssno].map {|p| [p, create(p)]}.to_h
  }

  def convert(book_assignments)
    book_assignments.each.map {|k, v| [all_books[k].id.to_s, v]}.to_h
  end

  describe "GET #index" do

    let(:event) {
      create(:march_event)
    }

    let(:user_assignments) {
      create(:mar_user_assignments, event: event, books: convert(parker: 2, ssno: 1))
    }

    before do
      create(:mar_admin_assignments, event: event,
        books: convert(parker: 1, ncmj: 2, bahlow: 1))
      create(:empty_assignment, books: convert(parker: 3))
      sign_in user_assignments.profile.user
      get :index, params: {event_id: event, year: user_assignments.year}
    end

    it "returns a success response" do
      expect(response).to be_success
    end

    it "creates a book_assignment list with all books" do
      book_assignments = assigns[:book_assignments]
      book_assignments_books = book_assignments.map(&:book)
      Book.all.each do |book|
        expect(book_assignments_books).to include(book)
      end
    end

    it "it limits the books to 500 to avoid abouse" do
      600.times do |i|
        Book.new(title: "Extra book#{i}").save
      end
      sleep(1)
      get :index, params: {event_id: event, year: user_assignments.year}
      expect(assigns[:book_assignments].length).to be < 500
    end
  end

=begin  describe "GET #show" do
    it "returns a success response" do
      assignment_set = AssignmentSet.create! valid_attributes
      get :show, params: {id: assignment_set.to_param}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      assignment_set = AssignmentSet.create! valid_attributes
      get :edit, params: {id: assignment_set.to_param}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new AssignmentSet" do
        expect {
          post :create, params: {assignment_set: valid_attributes}, session: valid_session
        }.to change(AssignmentSet, :count).by(1)
      end

      it "redirects to the created assignment_set" do
        post :create, params: {assignment_set: valid_attributes}, session: valid_session
        expect(response).to redirect_to(AssignmentSet.last)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {assignment_set: invalid_attributes}, session: valid_session
        expect(response).to be_success
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested assignment_set" do
        assignment_set = AssignmentSet.create! valid_attributes
        put :update, params: {id: assignment_set.to_param, assignment_set: new_attributes}, session: valid_session
        assignment_set.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the assignment_set" do
        assignment_set = AssignmentSet.create! valid_attributes
        put :update, params: {id: assignment_set.to_param, assignment_set: valid_attributes}, session: valid_session
        expect(response).to redirect_to(assignment_set)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        assignment_set = AssignmentSet.create! valid_attributes
        put :update, params: {id: assignment_set.to_param, assignment_set: invalid_attributes}, session: valid_session
        expect(response).to be_success
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested assignment_set" do
      assignment_set = AssignmentSet.create! valid_attributes
      expect {
        delete :destroy, params: {id: assignment_set.to_param}, session: valid_session
      }.to change(AssignmentSet, :count).by(-1)
    end

    it "redirects to the assignment_sets list" do
      assignment_set = AssignmentSet.create! valid_attributes
      delete :destroy, params: {id: assignment_set.to_param}, session: valid_session
      expect(response).to redirect_to(assignment_sets_url)
    end
  end
=end
end
